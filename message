{
  "previous": "%tCBJo4+2fmLVO/ylEF+M1f/9vVCquCkaV1yFpzvUXZ4=.sha256",
  "sequence": 12562,
  "author": "@+oaWWDs8g73EZFUMfW37R/ULtFEjwKN/DczvdYihjbU=.ed25519",
  "timestamp": 1569785073081,
  "hash": "sha256",
  "content": {
    "type": "post",
    "text": "> Maybe there’s some method of using a custom signature check with Git’s `--verify-signatures` option?\r\n\r\nI found [how GitHub supports S/MIME signatures](https://github.com/github/smimesign) and it's actually beautiful:\r\n\r\n```console\r\n$ git config --local gpg.x509.program smimesign\r\n$ git config --local gpg.format x509\r\n```\r\n\r\nEven just a simple implementation that enforces a rule like \"gpg signature is valid and key exists in HEAD's `AUTHORS.gpg`\" would solve the problem. I'm a bit surprised that there aren't already tools that do this. ",
    "mentions": [],
    "root": "%K72sSk9yIc7gAPcvt2CMR0N7rrTkp0V3UHa/bpo5rSI=.sha256",
    "branch": []
  },
  "signature": "vqQNSrPYCdsGlUD7V1X3o7XJja63MGvxSxEoZN5M5404RL3947CkzbV/XUjmUUBG4LBSsNaVn7Lo+peiJS4OAg==.sig.ed25519"
}