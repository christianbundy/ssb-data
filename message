{
  "previous": "%i1iUx6MzeXRHQqLEsH7LOY8Ox3NCtak57mg2yQprmuY=.sha256",
  "sequence": 14921,
  "author": "@+oaWWDs8g73EZFUMfW37R/ULtFEjwKN/DczvdYihjbU=.ed25519",
  "timestamp": 1579821225396,
  "hash": "sha256",
  "content": {
    "type": "post",
    "text": "[@mix](@ye+QM09iPcDJD6YvQYjoQc7sLF/IFhmNbEqgdzQo3lQ=.ed25519)\r\n\r\n> does it not magically go looking for one at `~/.ssb/manifest.json`?\r\n\r\nNope, it connects and calls the `manifest()` method over MuxRPC to download the server's manifest -- slightly slower, so you wouldn't want to do it if you have lots of round-trip latency, but for local connections it's totally fine.\r\n\r\n> The reason I donâ€™t like that is it assumes a lot and locks you into using the same ssb identity.\r\n\r\nTotally. We could also:\r\n\r\n```javascript\r\nssbClient({ keys }, (err, api) => {})\r\n```\r\n\r\nI'm open to changing the recommendation in the readme, just wanted to point out that there was a conflict. I think any of them could be justified and I don't feel super strongly either way.\r\n\r\nMy dream API:\r\n\r\n```javascript\r\nconst ssb = await ssbClient();\r\n\r\n// or \r\n\r\nconst ssbAgain = await ssbClient({ keys: config.keys });\r\n```",
    "mentions": [
      {
        "link": "@ye+QM09iPcDJD6YvQYjoQc7sLF/IFhmNbEqgdzQo3lQ=.ed25519",
        "name": "mix"
      }
    ],
    "root": "%dka5LyifpeWotdE1LxNGmbk1Jtwme0RUlA0LhfM0blQ=.sha256",
    "branch": [
      "%xuLqEl9LfI9zNYiq2tgP0YyUKc4RZkadgwf6pr+lOsM=.sha256"
    ]
  },
  "signature": "OrlGxNd9Hd7wzcs+5SkAeqQ1L1XjenIVFJKm+1tOvt8Kw930WTxj1FB4wuG3FgywbydhvOa8D8cH7DbBhIYDDA==.sig.ed25519"
}